import os
import logging
import pandas as pd
import numpy as np
from clickhouse_driver import Client
from airflow.providers.postgres.hooks.postgres import PostgresHook


CLICKHOUSE_CONFIG = {
    "host": "clickhouse",
    "port": 9000,
    "user": os.getenv("CLICKHOUSE_USER", "airflow"),
    "password": os.getenv("CLICKHOUSE_PASSWORD", "airflow"),
    "database": os.getenv("CLICKHOUSE_DB", "data_mart"),
}

# –ö–æ–Ω–Ω–µ–∫—Ç –∫ Postgres (DDS)
pg_hook = PostgresHook(postgres_conn_id="postgres_default")
engine_pg = pg_hook.get_sqlalchemy_engine()

# –ü–∞–ø–∫–∞ —Å SQL-—Å–∫—Ä–∏–ø—Ç–∞–º–∏
SQL_DIR = "/opt/airflow/sql"


def transfer_table(filename: str, ch_table: str, batch_size: int = 10000):
    # –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL –≤ ClickHouse, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞–∫–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    try:
        path = os.path.join(SQL_DIR, filename)

        with open(path, "r") as f:
            sql_query = f.read()

        df = pd.read_sql(sql_query, engine_pg)

        if df.empty:
            logging.info(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ {ch_table}")
            return

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ClickHouse
        if 'user_id' in df.columns:
            df['user_id'] = pd.to_numeric(df['user_id'], errors='coerce').fillna(0).astype('int64')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ UUID –ø–æ–ª–µ–π
        uuid_columns = ['session_id', 'order_id']
        for col in uuid_columns:
            if col in df.columns:
                df[col] = df[col].astype(str)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        for col in numeric_cols:
            df[col] = df[col].fillna(0)
            # –ó–∞–º–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if df[col].dtype == 'float64':
                df[col] = df[col].replace([np.inf, -np.inf], 0)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in df.select_dtypes(include=["object"]).columns:
            df[col] = df[col].fillna("")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        data = [tuple(x) for x in df.to_numpy()]
        columns = list(df.columns)

        client = Client(**CLICKHOUSE_CONFIG)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º
        for i in range(0, len(data), batch_size):
            batch = data[i:i + batch_size]
            insert_query = f"INSERT INTO {ch_table} ({', '.join(columns)}) VALUES"
            client.execute(insert_query, batch)
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(batch)} —Å—Ç—Ä–æ–∫ –≤ {ch_table}")

        logging.info(f"üéâ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω: {len(data)} —Å—Ç—Ä–æ–∫ –≤ {ch_table}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –≤ {ch_table}: {e}")
        raise
