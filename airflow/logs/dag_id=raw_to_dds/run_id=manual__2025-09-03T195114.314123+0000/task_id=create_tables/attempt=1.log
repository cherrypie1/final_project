[2025-09-03T19:51:35.223+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: raw_to_dds.create_tables manual__2025-09-03T19:51:14.314123+00:00 [queued]>
[2025-09-03T19:51:35.245+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: raw_to_dds.create_tables manual__2025-09-03T19:51:14.314123+00:00 [queued]>
[2025-09-03T19:51:35.246+0000] {taskinstance.py:1308} INFO - Starting attempt 1 of 3
[2025-09-03T19:51:35.285+0000] {taskinstance.py:1327} INFO - Executing <Task(PostgresOperator): create_tables> on 2025-09-03 19:51:14.314123+00:00
[2025-09-03T19:51:35.297+0000] {standard_task_runner.py:57} INFO - Started process 2124 to run task
[2025-09-03T19:51:35.306+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'raw_to_dds', 'create_tables', 'manual__2025-09-03T19:51:14.314123+00:00', '--job-id', '269', '--raw', '--subdir', 'DAGS_FOLDER/raw_to_dds.py', '--cfg-path', '/tmp/tmpnal8213e']
[2025-09-03T19:51:35.312+0000] {standard_task_runner.py:85} INFO - Job 269: Subtask create_tables
[2025-09-03T19:51:35.359+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-03T19:51:35.456+0000] {task_command.py:410} INFO - Running <TaskInstance: raw_to_dds.create_tables manual__2025-09-03T19:51:14.314123+00:00 [running]> on host 566c672cfab0
[2025-09-03T19:51:35.673+0000] {taskinstance.py:1547} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='raw_to_dds' AIRFLOW_CTX_TASK_ID='create_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-09-03T19:51:14.314123+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-09-03T19:51:14.314123+00:00'
[2025-09-03T19:51:35.674+0000] {sql.py:265} INFO - Executing: 
        CREATE TABLE IF NOT EXISTS dictionary.countries (
            id SERIAL PRIMARY KEY,
            country_name TEXT UNIQUE
        );

        CREATE TABLE IF NOT EXISTS dictionary.cities (
            id SERIAL PRIMARY KEY,
            city_name TEXT,
            country_id INT REFERENCES dictionary.countries(id),
            UNIQUE(city_name, country_id)
        );

        CREATE TABLE IF NOT EXISTS dictionary.event_types (
            id SERIAL PRIMARY KEY,
            event_type_name TEXT UNIQUE
        );

        CREATE TABLE IF NOT EXISTS dds.users (
            id SERIAL PRIMARY KEY,
            user_id INT UNIQUE
        );

        CREATE TABLE IF NOT EXISTS dds.facts_events (
            id SERIAL PRIMARY KEY,
            user_id INT REFERENCES dds.users(id),
            event_type_id INT REFERENCES dictionary.event_types(id),
            city_id INT REFERENCES dictionary.cities(id),
            lat DOUBLE PRECISION,
            lon DOUBLE PRECISION,
            cost_usd NUMERIC(10,2),
            cost_eur NUMERIC(10,2),
            cost_rub NUMERIC(10,2),
            weather_temp NUMERIC(5,2),
            weather_desc TEXT,
            timestamp TIMESTAMPTZ
        );
        
[2025-09-03T19:51:35.701+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-03T19:51:35.861+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-03T19:51:35.877+0000] {sql.py:375} INFO - Running statement: 
        CREATE TABLE IF NOT EXISTS dictionary.countries (
            id SERIAL PRIMARY KEY,
            country_name TEXT UNIQUE
        );

        CREATE TABLE IF NOT EXISTS dictionary.cities (
            id SERIAL PRIMARY KEY,
            city_name TEXT,
            country_id INT REFERENCES dictionary.countries(id),
            UNIQUE(city_name, country_id)
        );

        CREATE TABLE IF NOT EXISTS dictionary.event_types (
            id SERIAL PRIMARY KEY,
            event_type_name TEXT UNIQUE
        );

        CREATE TABLE IF NOT EXISTS dds.users (
            id SERIAL PRIMARY KEY,
            user_id INT UNIQUE
        );

        CREATE TABLE IF NOT EXISTS dds.facts_events (
            id SERIAL PRIMARY KEY,
            user_id INT REFERENCES dds.users(id),
            event_type_id INT REFERENCES dictionary.event_types(id),
            city_id INT REFERENCES dictionary.cities(id),
            lat DOUBLE PRECISION,
            lon DOUBLE PRECISION,
            cost_usd NUMERIC(10,2),
            cost_eur NUMERIC(10,2),
            cost_rub NUMERIC(10,2),
            weather_temp NUMERIC(5,2),
            weather_desc TEXT,
            timestamp TIMESTAMPTZ
        );
        , parameters: None
[2025-09-03T19:51:35.909+0000] {taskinstance.py:1350} INFO - Marking task as SUCCESS. dag_id=raw_to_dds, task_id=create_tables, execution_date=20250903T195114, start_date=20250903T195135, end_date=20250903T195135
[2025-09-03T19:51:35.960+0000] {local_task_job_runner.py:225} INFO - Task exited with return code 0
[2025-09-03T19:51:36.011+0000] {taskinstance.py:2653} INFO - 1 downstream tasks scheduled from follow-on schedule check
