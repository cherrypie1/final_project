[2025-09-10T13:47:55.195+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: kafka_to_postgres_batch.init_schema manual__2025-09-10T13:47:44.858943+00:00 [queued]>
[2025-09-10T13:47:55.224+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: kafka_to_postgres_batch.init_schema manual__2025-09-10T13:47:44.858943+00:00 [queued]>
[2025-09-10T13:47:55.225+0000] {taskinstance.py:1308} INFO - Starting attempt 1 of 3
[2025-09-10T13:47:55.269+0000] {taskinstance.py:1327} INFO - Executing <Task(PostgresOperator): init_schema> on 2025-09-10 13:47:44.858943+00:00
[2025-09-10T13:47:55.283+0000] {standard_task_runner.py:57} INFO - Started process 1125 to run task
[2025-09-10T13:47:55.291+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'kafka_to_postgres_batch', 'init_schema', 'manual__2025-09-10T13:47:44.858943+00:00', '--job-id', '107', '--raw', '--subdir', 'DAGS_FOLDER/dags.py', '--cfg-path', '/tmp/tmp0belg9pg']
[2025-09-10T13:47:55.296+0000] {standard_task_runner.py:85} INFO - Job 107: Subtask init_schema
[2025-09-10T13:47:55.339+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-10T13:47:55.557+0000] {task_command.py:410} INFO - Running <TaskInstance: kafka_to_postgres_batch.init_schema manual__2025-09-10T13:47:44.858943+00:00 [running]> on host c905ba028b15
[2025-09-10T13:47:56.031+0000] {taskinstance.py:1547} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='kafka_to_postgres_batch' AIRFLOW_CTX_TASK_ID='init_schema' AIRFLOW_CTX_EXECUTION_DATE='2025-09-10T13:47:44.858943+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-09-10T13:47:44.858943+00:00'
[2025-09-10T13:47:56.038+0000] {sql.py:265} INFO - Executing: 
-- RAW 

CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    event_type TEXT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC(18,2),
    cost_eur NUMERIC(18,2),
    cost_rub NUMERIC(18,2),
    weather_temp NUMERIC(5,2),
    weather_desc TEXT,
    timestamp TIMESTAMP NOT NULL
);


-- DDS 

CREATE SCHEMA IF NOT EXISTS dds;

CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    city TEXT,
    country TEXT
);

CREATE TABLE IF NOT EXISTS dds.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    event_type TEXT,
    timestamp TIMESTAMP
);


-- dictionary

CREATE SCHEMA IF NOT EXISTS dictionary;

-- Валюты
CREATE TABLE IF NOT EXISTS dictionary.currencies (
    code TEXT PRIMARY KEY,                -- Код валюты (USD, EUR, RUB)
    rate_to_usd NUMERIC(18,6) NOT NULL,   -- Курс к доллару
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Погода
CREATE TABLE IF NOT EXISTS dictionary.weather (
    city TEXT NOT NULL,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    temp DOUBLE PRECISION,
    description TEXT,
    recorded_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (city, recorded_at)
);
[2025-09-10T13:47:56.088+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-10T13:47:57.135+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-10T13:47:57.153+0000] {sql.py:375} INFO - Running statement: 
-- RAW 

CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    event_type TEXT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC(18,2),
    cost_eur NUMERIC(18,2),
    cost_rub NUMERIC(18,2),
    weather_temp NUMERIC(5,2),
    weather_desc TEXT,
    timestamp TIMESTAMP NOT NULL
);


-- DDS 

CREATE SCHEMA IF NOT EXISTS dds;

CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    city TEXT,
    country TEXT
);

CREATE TABLE IF NOT EXISTS dds.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    event_type TEXT,
    timestamp TIMESTAMP
);


-- dictionary

CREATE SCHEMA IF NOT EXISTS dictionary;

-- Валюты
CREATE TABLE IF NOT EXISTS dictionary.currencies (
    code TEXT PRIMARY KEY,                -- Код валюты (USD, EUR, RUB)
    rate_to_usd NUMERIC(18,6) NOT NULL,   -- Курс к доллару
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Погода
CREATE TABLE IF NOT EXISTS dictionary.weather (
    city TEXT NOT NULL,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    temp DOUBLE PRECISION,
    description TEXT,
    recorded_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (city, recorded_at)
);, parameters: None
[2025-09-10T13:47:57.187+0000] {taskinstance.py:1350} INFO - Marking task as SUCCESS. dag_id=kafka_to_postgres_batch, task_id=init_schema, execution_date=20250910T134744, start_date=20250910T134755, end_date=20250910T134757
[2025-09-10T13:47:57.231+0000] {local_task_job_runner.py:225} INFO - Task exited with return code 0
[2025-09-10T13:47:57.304+0000] {taskinstance.py:2653} INFO - 1 downstream tasks scheduled from follow-on schedule check
