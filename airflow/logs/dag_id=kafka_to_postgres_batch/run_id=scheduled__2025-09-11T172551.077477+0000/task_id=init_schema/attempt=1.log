[2025-09-11T17:56:07.567+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/utils/sqlalchemy.py:124 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-11T17:56:07.725+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: kafka_to_postgres_batch.init_schema scheduled__2025-09-11T17:25:51.077477+00:00 [queued]>
[2025-09-11T17:56:07.740+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: kafka_to_postgres_batch.init_schema scheduled__2025-09-11T17:25:51.077477+00:00 [queued]>
[2025-09-11T17:56:07.741+0000] {taskinstance.py:1308} INFO - Starting attempt 1 of 3
[2025-09-11T17:56:07.770+0000] {taskinstance.py:1327} INFO - Executing <Task(PostgresOperator): init_schema> on 2025-09-11 17:25:51.077477+00:00
[2025-09-11T17:56:07.779+0000] {standard_task_runner.py:57} INFO - Started process 2795 to run task
[2025-09-11T17:56:07.784+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'kafka_to_postgres_batch', 'init_schema', 'scheduled__2025-09-11T17:25:51.077477+00:00', '--job-id', '145', '--raw', '--subdir', 'DAGS_FOLDER/dags.py', '--cfg-path', '/tmp/tmppqjdbles']
[2025-09-11T17:56:07.788+0000] {standard_task_runner.py:85} INFO - Job 145: Subtask init_schema
[2025-09-11T17:56:07.819+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-11T17:56:07.875+0000] {task_command.py:410} INFO - Running <TaskInstance: kafka_to_postgres_batch.init_schema scheduled__2025-09-11T17:25:51.077477+00:00 [running]> on host c905ba028b15
[2025-09-11T17:56:07.902+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/utils/sqlalchemy.py:124 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-11T17:56:08.086+0000] {taskinstance.py:1547} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='kafka_to_postgres_batch' AIRFLOW_CTX_TASK_ID='init_schema' AIRFLOW_CTX_EXECUTION_DATE='2025-09-11T17:25:51.077477+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-09-11T17:25:51.077477+00:00'
[2025-09-11T17:56:08.087+0000] {sql.py:265} INFO - Executing: -- RAW 
CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    session_id UUID,
    event_type TEXT,
    product_id INT,
    order_id UUID,
    quantity INT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC(18,2),
    cost_eur NUMERIC(18,2),
    cost_rub NUMERIC(18,2),
    weather_temp NUMERIC(5,2),
    weather_desc TEXT,
    timestamp TIMESTAMP NOT NULL
);


-- DDS (нормализованные таблицы)

CREATE SCHEMA IF NOT EXISTS dds;

-- Пользователи
CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    city TEXT,
    country TEXT
);

-- Сессии
CREATE TABLE IF NOT EXISTS dds.sessions (
    session_id UUID PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);

-- Товары
CREATE TABLE IF NOT EXISTS dds.products (
    product_id INT PRIMARY KEY,
    category_id INT,
    supplier_id INT,
    name TEXT
);

CREATE TABLE IF NOT EXISTS dds.categories (
    category_id SERIAL PRIMARY KEY,
    category_name TEXT
);

CREATE TABLE IF NOT EXISTS dds.suppliers (
    supplier_id SERIAL PRIMARY KEY,
    supplier_name TEXT
);

-- События
CREATE TABLE IF NOT EXISTS dds.events (
    event_id SERIAL PRIMARY KEY,
    session_id UUID REFERENCES dds.sessions(session_id),
    product_id INT REFERENCES dds.products(product_id),
    event_type TEXT,
    timestamp TIMESTAMP
);

-- Заказы
CREATE TABLE IF NOT EXISTS dds.orders (
    order_id UUID PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dds.order_items (
    id SERIAL PRIMARY KEY,
    order_id UUID REFERENCES dds.orders(order_id),
    product_id INT REFERENCES dds.products(product_id),
    quantity INT,
    price NUMERIC(18,2)
);

CREATE TABLE IF NOT EXISTS dds.payments (
    id SERIAL PRIMARY KEY,
    order_id UUID REFERENCES dds.orders(order_id),
    amount NUMERIC(18,2),
    currency TEXT,
    paid_at TIMESTAMP
);

-- Маркетинг
CREATE TABLE IF NOT EXISTS dds.campaigns (
    campaign_id SERIAL PRIMARY KEY,
    name TEXT,
    start_date TIMESTAMP,
    end_date TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dds.promocodes (
    promocode_id SERIAL PRIMARY KEY,
    code TEXT,
    discount NUMERIC(5,2)
);

CREATE TABLE IF NOT EXISTS dds.user_campaigns (
    id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    campaign_id INT REFERENCES dds.campaigns(campaign_id),
    applied_at TIMESTAMP
);

-- Гео / устройства
CREATE TABLE IF NOT EXISTS dds.user_devices (
    device_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    device_type TEXT,
    os TEXT
);

CREATE TABLE IF NOT EXISTS dds.user_locations (
    location_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION
);
[2025-09-11T17:56:08.102+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-11T17:56:08.346+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-11T17:56:08.369+0000] {sql.py:375} INFO - Running statement: -- RAW 
CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    session_id UUID,
    event_type TEXT,
    product_id INT,
    order_id UUID,
    quantity INT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC(18,2),
    cost_eur NUMERIC(18,2),
    cost_rub NUMERIC(18,2),
    weather_temp NUMERIC(5,2),
    weather_desc TEXT,
    timestamp TIMESTAMP NOT NULL
);


-- DDS (нормализованные таблицы)

CREATE SCHEMA IF NOT EXISTS dds;

-- Пользователи
CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    city TEXT,
    country TEXT
);

-- Сессии
CREATE TABLE IF NOT EXISTS dds.sessions (
    session_id UUID PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);

-- Товары
CREATE TABLE IF NOT EXISTS dds.products (
    product_id INT PRIMARY KEY,
    category_id INT,
    supplier_id INT,
    name TEXT
);

CREATE TABLE IF NOT EXISTS dds.categories (
    category_id SERIAL PRIMARY KEY,
    category_name TEXT
);

CREATE TABLE IF NOT EXISTS dds.suppliers (
    supplier_id SERIAL PRIMARY KEY,
    supplier_name TEXT
);

-- События
CREATE TABLE IF NOT EXISTS dds.events (
    event_id SERIAL PRIMARY KEY,
    session_id UUID REFERENCES dds.sessions(session_id),
    product_id INT REFERENCES dds.products(product_id),
    event_type TEXT,
    timestamp TIMESTAMP
);

-- Заказы
CREATE TABLE IF NOT EXISTS dds.orders (
    order_id UUID PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    created_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dds.order_items (
    id SERIAL PRIMARY KEY,
    order_id UUID REFERENCES dds.orders(order_id),
    product_id INT REFERENCES dds.products(product_id),
    quantity INT,
    price NUMERIC(18,2)
);

CREATE TABLE IF NOT EXISTS dds.payments (
    id SERIAL PRIMARY KEY,
    order_id UUID REFERENCES dds.orders(order_id),
    amount NUMERIC(18,2),
    currency TEXT,
    paid_at TIMESTAMP
);

-- Маркетинг
CREATE TABLE IF NOT EXISTS dds.campaigns (
    campaign_id SERIAL PRIMARY KEY,
    name TEXT,
    start_date TIMESTAMP,
    end_date TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dds.promocodes (
    promocode_id SERIAL PRIMARY KEY,
    code TEXT,
    discount NUMERIC(5,2)
);

CREATE TABLE IF NOT EXISTS dds.user_campaigns (
    id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    campaign_id INT REFERENCES dds.campaigns(campaign_id),
    applied_at TIMESTAMP
);

-- Гео / устройства
CREATE TABLE IF NOT EXISTS dds.user_devices (
    device_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    device_type TEXT,
    os TEXT
);

CREATE TABLE IF NOT EXISTS dds.user_locations (
    location_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION
);, parameters: None
[2025-09-11T17:56:08.454+0000] {taskinstance.py:1824} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/common/sql/operators/sql.py", line 277, in execute
    **extra_kwargs,
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/common/sql/hooks/sql.py", line 349, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/common/sql/hooks/sql.py", line 380, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.DatatypeMismatch: foreign key constraint "sessions_user_id_fkey" cannot be implemented
DETAIL:  Key columns "user_id" and "user_id" are of incompatible types: text and integer.

[2025-09-11T17:56:08.480+0000] {taskinstance.py:1350} INFO - Marking task as UP_FOR_RETRY. dag_id=kafka_to_postgres_batch, task_id=init_schema, execution_date=20250911T172551, start_date=20250911T175607, end_date=20250911T175608
[2025-09-11T17:56:08.538+0000] {standard_task_runner.py:109} ERROR - Failed to execute job 145 for task init_schema (foreign key constraint "sessions_user_id_fkey" cannot be implemented
DETAIL:  Key columns "user_id" and "user_id" are of incompatible types: text and integer.
; 2795)
[2025-09-11T17:56:08.599+0000] {local_task_job_runner.py:225} INFO - Task exited with return code 1
[2025-09-11T17:56:08.645+0000] {taskinstance.py:2653} INFO - 0 downstream tasks scheduled from follow-on schedule check
