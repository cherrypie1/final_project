[2025-09-06T17:57:21.784+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: kafka_to_postgres_batch.init_schema manual__2025-09-06T17:56:58.558292+00:00 [queued]>
[2025-09-06T17:57:21.806+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: kafka_to_postgres_batch.init_schema manual__2025-09-06T17:56:58.558292+00:00 [queued]>
[2025-09-06T17:57:21.807+0000] {taskinstance.py:1308} INFO - Starting attempt 1 of 3
[2025-09-06T17:57:21.844+0000] {taskinstance.py:1327} INFO - Executing <Task(PostgresOperator): init_schema> on 2025-09-06 17:56:58.558292+00:00
[2025-09-06T17:57:21.882+0000] {standard_task_runner.py:57} INFO - Started process 347 to run task
[2025-09-06T17:57:21.892+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'kafka_to_postgres_batch', 'init_schema', 'manual__2025-09-06T17:56:58.558292+00:00', '--job-id', '53', '--raw', '--subdir', 'DAGS_FOLDER/dags.py', '--cfg-path', '/tmp/tmpdmmupogq']
[2025-09-06T17:57:21.940+0000] {standard_task_runner.py:85} INFO - Job 53: Subtask init_schema
[2025-09-06T17:57:22.242+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-06T17:57:22.385+0000] {task_command.py:410} INFO - Running <TaskInstance: kafka_to_postgres_batch.init_schema manual__2025-09-06T17:56:58.558292+00:00 [running]> on host ef9bb72bce84
[2025-09-06T17:57:22.747+0000] {taskinstance.py:1547} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='kafka_to_postgres_batch' AIRFLOW_CTX_TASK_ID='init_schema' AIRFLOW_CTX_EXECUTION_DATE='2025-09-06T17:56:58.558292+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-09-06T17:56:58.558292+00:00'
[2025-09-06T17:57:22.750+0000] {sql.py:265} INFO - Executing: -- RAW слой
CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    event_type TEXT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC,
    cost_eur NUMERIC,
    cost_rub NUMERIC,
    weather_temp NUMERIC,
    weather_desc TEXT,
    timestamp TIMESTAMP
);

-- DDS слой
CREATE SCHEMA IF NOT EXISTS dds;

CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    city TEXT,
    country TEXT
);

CREATE TABLE IF NOT EXISTS dds.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    event_type TEXT,
    timestamp TIMESTAMP
);

-- Справочники
CREATE SCHEMA IF NOT EXISTS dictionary;

CREATE TABLE IF NOT EXISTS dictionary.currencies (
    code TEXT PRIMARY KEY,
    rate_to_usd NUMERIC,
    updated_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dictionary.weather (
    weather_desc TEXT PRIMARY KEY,
    avg_temp NUMERIC,
    updated_at TIMESTAMP
);
[2025-09-06T17:57:22.791+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-06T17:57:23.699+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-06T17:57:23.752+0000] {sql.py:375} INFO - Running statement: -- RAW слой
CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    event_type TEXT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC,
    cost_eur NUMERIC,
    cost_rub NUMERIC,
    weather_temp NUMERIC,
    weather_desc TEXT,
    timestamp TIMESTAMP
);

-- DDS слой
CREATE SCHEMA IF NOT EXISTS dds;

CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    city TEXT,
    country TEXT
);

CREATE TABLE IF NOT EXISTS dds.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    event_type TEXT,
    timestamp TIMESTAMP
);

-- Справочники
CREATE SCHEMA IF NOT EXISTS dictionary;

CREATE TABLE IF NOT EXISTS dictionary.currencies (
    code TEXT PRIMARY KEY,
    rate_to_usd NUMERIC,
    updated_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dictionary.weather (
    weather_desc TEXT PRIMARY KEY,
    avg_temp NUMERIC,
    updated_at TIMESTAMP
);, parameters: None
[2025-09-06T17:57:23.839+0000] {taskinstance.py:1350} INFO - Marking task as SUCCESS. dag_id=kafka_to_postgres_batch, task_id=init_schema, execution_date=20250906T175658, start_date=20250906T175721, end_date=20250906T175723
[2025-09-06T17:57:23.939+0000] {local_task_job_runner.py:225} INFO - Task exited with return code 0
[2025-09-06T17:57:24.020+0000] {taskinstance.py:2653} INFO - 1 downstream tasks scheduled from follow-on schedule check
