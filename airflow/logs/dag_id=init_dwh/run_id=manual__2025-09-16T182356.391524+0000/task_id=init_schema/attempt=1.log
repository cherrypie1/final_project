[2025-09-16T18:24:01.381+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: init_dwh.init_schema manual__2025-09-16T18:23:56.391524+00:00 [queued]>
[2025-09-16T18:24:01.395+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: init_dwh.init_schema manual__2025-09-16T18:23:56.391524+00:00 [queued]>
[2025-09-16T18:24:01.395+0000] {taskinstance.py:1308} INFO - Starting attempt 1 of 1
[2025-09-16T18:24:01.418+0000] {taskinstance.py:1327} INFO - Executing <Task(PostgresOperator): init_schema> on 2025-09-16 18:23:56.391524+00:00
[2025-09-16T18:24:01.431+0000] {standard_task_runner.py:57} INFO - Started process 1924 to run task
[2025-09-16T18:24:01.434+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'init_dwh', 'init_schema', 'manual__2025-09-16T18:23:56.391524+00:00', '--job-id', '712', '--raw', '--subdir', 'DAGS_FOLDER/init_dwh.py', '--cfg-path', '/tmp/tmp_v301s3n']
[2025-09-16T18:24:01.437+0000] {standard_task_runner.py:85} INFO - Job 712: Subtask init_schema
[2025-09-16T18:24:01.463+0000] {logging_mixin.py:150} WARNING - /home/***/.local/lib/python3.7/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-09-16T18:24:01.515+0000] {task_command.py:410} INFO - Running <TaskInstance: init_dwh.init_schema manual__2025-09-16T18:23:56.391524+00:00 [running]> on host d6e2a7c8b3ee
[2025-09-16T18:24:01.706+0000] {taskinstance.py:1547} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='init_dwh' AIRFLOW_CTX_TASK_ID='init_schema' AIRFLOW_CTX_EXECUTION_DATE='2025-09-16T18:23:56.391524+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-09-16T18:23:56.391524+00:00'
[2025-09-16T18:24:01.710+0000] {sql.py:265} INFO - Executing: -- RAW
CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    session_id TEXT,
    event_type TEXT,
    product_id INTEGER,
    product_name TEXT,
    product_category TEXT,
    order_id TEXT,
    quantity INTEGER,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC(18,2),
    cost_eur NUMERIC(18,2),
    cost_rub NUMERIC(18,2),
    weather_temp NUMERIC(5,2),
    weather_desc TEXT,
    timestamp TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS raw.user_profiles (
    user_profile_id SERIAL PRIMARY KEY,
    user_id TEXT,
    name TEXT,
    email TEXT,
    birth_date DATE,
    gender TEXT,
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.user_devices (
    user_device_id SERIAL PRIMARY KEY,
    user_id TEXT,
    device_type TEXT,
    os TEXT,
    browser TEXT,
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.user_locations (
    user_location_id SERIAL PRIMARY KEY,
    user_id TEXT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.orders (
    raw_order_id SERIAL PRIMARY KEY,
    order_id TEXT,
    user_id TEXT,
    order_ts TIMESTAMP,
    total_usd NUMERIC(18,2),
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.order_items (
    raw_order_item_id SERIAL PRIMARY KEY,
    order_id TEXT,
    product_id INTEGER,
    quantity INTEGER,
    price_usd NUMERIC(18,2),
    received_at TIMESTAMP DEFAULT NOW()
);

-- Таблица для кампаний с полем cost
CREATE TABLE IF NOT EXISTS raw.campaign_events (
    campaign_event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    campaign_id TEXT,
    campaign_name TEXT,
    channel TEXT,
    action TEXT,
    cost NUMERIC(18,2),  -- Добавлено поле cost
    generated_at TIMESTAMP,
    received_at TIMESTAMP DEFAULT NOW()
);

-- DDS
CREATE SCHEMA IF NOT EXISTS dds;

-- dds.users
CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    name TEXT,
    email TEXT,
    birth_date DATE,
    gender TEXT CHECK (gender IN ('male','female')),
    city TEXT,
    country TEXT
);

-- dds.events
CREATE TABLE IF NOT EXISTS dds.events (
    event_id     SERIAL PRIMARY KEY,
    user_id      BIGINT NOT NULL,
    event_type   TEXT NOT NULL,
    timestamp    TIMESTAMP NOT NULL,
    session_id   UUID,
    product_id   BIGINT,
    product_name TEXT,
    product_category TEXT,
    order_id     UUID,
    quantity     INT,
    cost_usd     NUMERIC,
    cost_eur     NUMERIC,
    cost_rub     NUMERIC,
    weather_temp NUMERIC,
    weather_desc TEXT,
    city         TEXT,
    country      TEXT,
    lat          NUMERIC,
    lon          NUMERIC
);

-- dds.orders
CREATE TABLE IF NOT EXISTS dds.orders (
    order_id UUID PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    order_ts TIMESTAMP NOT NULL,
    total_usd NUMERIC(18,2) CHECK (total_usd >= 0),
    status TEXT CHECK (status IN ('pending', 'success', 'failed', 'cancelled')) DEFAULT 'pending'
);

-- dds.order_items
CREATE TABLE IF NOT EXISTS dds.order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id UUID REFERENCES dds.orders(order_id),
    product_id INT NOT NULL,
    quantity INT CHECK (quantity > 0),
    price_usd NUMERIC(18,2) CHECK (price_usd >= 0)
);

-- dds.categories
CREATE TABLE IF NOT EXISTS dds.categories (
    category_id SERIAL PRIMARY KEY,
    category_name TEXT UNIQUE
);

-- dds.products
CREATE TABLE IF NOT EXISTS dds.products (
    product_id INT PRIMARY KEY,
    product_name TEXT,
    category_id INT REFERENCES dds.categories(category_id)
);

-- dds.sessions
CREATE TABLE IF NOT EXISTS dds.sessions (
    session_id UUID PRIMARY KEY,
    user_id BIGINT,
    start_ts TIMESTAMP,
    end_ts TIMESTAMP,
    event_count INT
);

-- Таблица для кампаний в DDS
CREATE TABLE IF NOT EXISTS dds.campaigns (
    campaign_id TEXT PRIMARY KEY,
    campaign_name TEXT,
    channel TEXT
);
[2025-09-16T18:24:01.735+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-16T18:24:02.252+0000] {base.py:73} INFO - Using connection ID 'postgres_default' for task execution.
[2025-09-16T18:24:02.263+0000] {sql.py:375} INFO - Running statement: -- RAW
CREATE SCHEMA IF NOT EXISTS raw;

CREATE TABLE IF NOT EXISTS raw.events (
    event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    session_id TEXT,
    event_type TEXT,
    product_id INTEGER,
    product_name TEXT,
    product_category TEXT,
    order_id TEXT,
    quantity INTEGER,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    cost_usd NUMERIC(18,2),
    cost_eur NUMERIC(18,2),
    cost_rub NUMERIC(18,2),
    weather_temp NUMERIC(5,2),
    weather_desc TEXT,
    timestamp TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS raw.user_profiles (
    user_profile_id SERIAL PRIMARY KEY,
    user_id TEXT,
    name TEXT,
    email TEXT,
    birth_date DATE,
    gender TEXT,
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.user_devices (
    user_device_id SERIAL PRIMARY KEY,
    user_id TEXT,
    device_type TEXT,
    os TEXT,
    browser TEXT,
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.user_locations (
    user_location_id SERIAL PRIMARY KEY,
    user_id TEXT,
    city TEXT,
    country TEXT,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.orders (
    raw_order_id SERIAL PRIMARY KEY,
    order_id TEXT,
    user_id TEXT,
    order_ts TIMESTAMP,
    total_usd NUMERIC(18,2),
    received_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS raw.order_items (
    raw_order_item_id SERIAL PRIMARY KEY,
    order_id TEXT,
    product_id INTEGER,
    quantity INTEGER,
    price_usd NUMERIC(18,2),
    received_at TIMESTAMP DEFAULT NOW()
);

-- Таблица для кампаний с полем cost
CREATE TABLE IF NOT EXISTS raw.campaign_events (
    campaign_event_id SERIAL PRIMARY KEY,
    user_id TEXT,
    campaign_id TEXT,
    campaign_name TEXT,
    channel TEXT,
    action TEXT,
    cost NUMERIC(18,2),  -- Добавлено поле cost
    generated_at TIMESTAMP,
    received_at TIMESTAMP DEFAULT NOW()
);

-- DDS
CREATE SCHEMA IF NOT EXISTS dds;

-- dds.users
CREATE TABLE IF NOT EXISTS dds.users (
    user_id TEXT PRIMARY KEY,
    name TEXT,
    email TEXT,
    birth_date DATE,
    gender TEXT CHECK (gender IN ('male','female')),
    city TEXT,
    country TEXT
);

-- dds.events
CREATE TABLE IF NOT EXISTS dds.events (
    event_id     SERIAL PRIMARY KEY,
    user_id      BIGINT NOT NULL,
    event_type   TEXT NOT NULL,
    timestamp    TIMESTAMP NOT NULL,
    session_id   UUID,
    product_id   BIGINT,
    product_name TEXT,
    product_category TEXT,
    order_id     UUID,
    quantity     INT,
    cost_usd     NUMERIC,
    cost_eur     NUMERIC,
    cost_rub     NUMERIC,
    weather_temp NUMERIC,
    weather_desc TEXT,
    city         TEXT,
    country      TEXT,
    lat          NUMERIC,
    lon          NUMERIC
);

-- dds.orders
CREATE TABLE IF NOT EXISTS dds.orders (
    order_id UUID PRIMARY KEY,
    user_id TEXT REFERENCES dds.users(user_id),
    order_ts TIMESTAMP NOT NULL,
    total_usd NUMERIC(18,2) CHECK (total_usd >= 0),
    status TEXT CHECK (status IN ('pending', 'success', 'failed', 'cancelled')) DEFAULT 'pending'
);

-- dds.order_items
CREATE TABLE IF NOT EXISTS dds.order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id UUID REFERENCES dds.orders(order_id),
    product_id INT NOT NULL,
    quantity INT CHECK (quantity > 0),
    price_usd NUMERIC(18,2) CHECK (price_usd >= 0)
);

-- dds.categories
CREATE TABLE IF NOT EXISTS dds.categories (
    category_id SERIAL PRIMARY KEY,
    category_name TEXT UNIQUE
);

-- dds.products
CREATE TABLE IF NOT EXISTS dds.products (
    product_id INT PRIMARY KEY,
    product_name TEXT,
    category_id INT REFERENCES dds.categories(category_id)
);

-- dds.sessions
CREATE TABLE IF NOT EXISTS dds.sessions (
    session_id UUID PRIMARY KEY,
    user_id BIGINT,
    start_ts TIMESTAMP,
    end_ts TIMESTAMP,
    event_count INT
);

-- Таблица для кампаний в DDS
CREATE TABLE IF NOT EXISTS dds.campaigns (
    campaign_id TEXT PRIMARY KEY,
    campaign_name TEXT,
    channel TEXT
);, parameters: None
[2025-09-16T18:24:02.287+0000] {taskinstance.py:1350} INFO - Marking task as SUCCESS. dag_id=init_dwh, task_id=init_schema, execution_date=20250916T182356, start_date=20250916T182401, end_date=20250916T182402
[2025-09-16T18:24:02.331+0000] {local_task_job_runner.py:225} INFO - Task exited with return code 0
[2025-09-16T18:24:02.364+0000] {taskinstance.py:2653} INFO - 0 downstream tasks scheduled from follow-on schedule check
